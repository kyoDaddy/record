* spring-reactor
    - 참고 
        - https://www.youtube.com/watch?v=v0BnqWLxYjQ&t=22s
        - https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.ContextExpectations.html#assertThat-java.util.function.Consumer-
    

    * Flux (0, N 개 / 흘러가는것)
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Flux
        - subscribe() 을 해야 데이터가 흐른다.
        - SubscribeOn() : 구독(subscribe)에서 사용할 스레드를 지정 도중 ObserveOn이 호출되어도 SubscribeOn의 스레드 지정에는 영향을 끼치지 않는다.


    * Mono (0, 1 개)
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Mono


    * StepVerifier
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/StepVerifier
        - publisher 를 subscribe 하면서 정의하는지 잘나오는지 확인하는 클래스
        - 기대하지 않는 이벤트가 발생하면 assertionError 발생
        - verify() or verifyComplete() 로 꼭 마무리!
        - withVirtualTime() : duration, interval 이 있는 Mono/Flux 를 테스트할 때 사용


    * Transform
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/transform
        - map() : map() 한 개의 데이터를 1-1 방식으로 변환 (동기적)
        - flatMap() : flatMap은 1개의 데이터로부터 시퀀스를 생성할 때 사용 (즉 1-n 방식의 변환을 처리) (비동기적 - 변경하는 행위자체를 Publisher가 감싸고 있음)
        - flatMapSequential() : flux 한 정보를 비동기지만 순서대로 줄세움


    * Merge
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Merge
        - mergeWith : 두개 Flux 병합
        - concatWith : 두개 Flux 순서를 유지하면서 병합
        - concat : 두개 Mono 를 병합하여 Flux 로 전달 Flux.concat(mono1, mono2);


    * Request
        - https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Request
        - log() : 로그 볼때 출력
        - thenCancel() : 중간에 취소 verify()  
            - take(2) 는 자기가 Flux를 새로 만들고, upstream에 2개 지나면 cancel을 날린다
        

    * Publisher -> subscribe -> subscriber -> onSubscribe -> subscription
                                           -> request(n)/cancel -> subscription
                data --------------------------------------------> subscription
                                           <---------------------- onNext(data)


    * Backpressure
        - 데이터를 subscriber 한테 실질적으로 처리할 수 있을 만큼의 수준으로 데이터를 제공 받는게 목적
        - webflux 기본적으로 31로 고정? 되있다고 한다.
           
           