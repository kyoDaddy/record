- Collection

    - List 
        - 순서가 있는 데이터의 집합, 데이터의 중복을 허용함

        - LinkedList : 링크드리스트
            - 각 노드가 데이터와 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터를 저장하는 자료구조
            - 노드와 링크로 구성된다.
            - 노드 : 실제 정보를 담고 있는 하나의 단위
            - 링크 : 노드간의 위치정보를 저장하고 있어, 연결리스트의 순서를 유지할 수 있도록 하는 연결고리
            - 노드의 시작점은 head. 끝점은 tail이라 부르면 노드의 추가, 삭제, 탐색이 가능하다.

        - Stack : 스택자료구조 (LIFO)

        - Vector : 동기화 보장
            - ArrayList에 동기화가 보장되도록 최적화함

        - ArrayList : 동기화 보장 하지 않음
            - 배열에 동적 메모리 증가 기능을 구현한 클래스
            - 동기화 지원 방법 : List list = Collections.synchronizeList(new ArrayList(…))

    - SET
        - 순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않음

        - HashSet : Set 계열의 대표 클래스
        - SortedSet : 정렬을 위한 Set 계열의 클래스

- Map 
    - List와 Set이 순서나 집합적인 개념의 인터페이스라면 Map은 검색의 개념이 가미된 인터페이스다.

    - 키와 값의 쌍으로 이루어진 데이터의 집합
    - 순서는 유지되지 않고, 키는 중복을 허용하지 않으며 값의 중복을 허용함
    - 인덱스를 해시 코드로 변환해 해당 위치에 값 저장

    - hashTable 
        - 동기화 보장하는 Map 계열의 클래스

    - HashMap : 
        - hasing을 사용하기에 많은 양의 데이터를 검색할 때 상당히 좋은 성능을 보인다.
        - 동기화를 보장하지 않는다.
        - HashMap은 데이터의 정렬이 없다.
        - LinkedHashMap 
            - key의 순서가 지켜지지 않는다는 단점을 해결하기 위해 사용
    

    - SortedMap : 
        - TreeMap : 데이터의 key를 기준으로 정렬을 할 수 있다.



- grpc
    - msa 간에 grpc 스트림 연결을 하는데 인스턴스가 3개 : 10개이면 어떻게 연결 할것인가? lb로 연결하면?


- http 304 Not Modified
    - 수정되지 않은 응답
    - 브라우저가 서버에 GET 요청을 보낼 때, 요청하는 정보를 이미 디스크에 가지고 있을 경우(캐시되어 있는 경우) 브라우저는 이 데이터가 변경되었는지 여부를 확인하는 요청을 보내게 된다.
    - 이와 같은 요청을 Conditional Get Request 라고 하며, 서버는 요청 데이터가 변경되지 않았을 경우 응답 코드로 304를 리턴 한다.
    - 물론 데이터가 변경되었다면 변경된 데이터를 응답으로 보내게 된다.



- dump
    - heap dump

    - thread dump